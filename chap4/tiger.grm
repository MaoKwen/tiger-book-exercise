%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	/* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <exp> exp program
/* et cetera */

%start program

%nonassoc DO OF
%nonassoc THEN
%nonassoc ELSE
%left SEMICOLON
%left ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS
%%

program: exp

exp
    : lvalue
    | STRING
    | INT
    | MINUS exp %prec UMINUS
    | exp_assign
    | exp_call
    | exp_if
    | exp_iter
    | BREAK
    | exp_op
    | exp_let
    | LPAREN RPAREN
    | LPAREN exp_seq RPAREN
    | NIL

exp_assign
    : lvalue ASSIGN exp
    | ID LBRACE RBRACE
    | ID LBRACE assign_list RBRACE
    | ID LBRACK exp RBRACK OF exp

assign_list
    : ID EQ exp
    | assign_list COMMA ID EQ exp

exp_call
    : ID LPAREN RPAREN
    | ID LPAREN exp_list RPAREN

exp_if
    : IF exp THEN exp ELSE exp
    | IF exp THEN exp

exp_iter
    : WHILE exp DO exp
    | FOR ID ASSIGN exp TO exp DO exp

exp_op
    : exp PLUS exp
    | exp MINUS exp
    | exp TIMES exp
    | exp DIVIDE exp
    | exp EQ exp
    | exp NEQ exp
    | exp GT exp
    | exp LT exp 
    | exp GE exp 
    | exp LE exp 
    | exp AND exp
    | exp OR exp

exp_let
    : LET decs IN END
    | LET decs IN exp_seq END

decs
    : /* empty */
    | decs dec

dec
    : tydec
    | vardec
    | fundec

tydec
    : TYPE ID EQ ty

ty
    : ID
    | LBRACE tyfields RBRACE
    | ARRAY OF ID

tyfields
    : /* empty */
    | tyfield_list

tyfield_list
    : ID COLON ID
    | tyfield_list COMMA ID COLON ID

vardec
    : VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

fundec
    : FUNCTION ID LPAREN tyfields RPAREN EQ exp
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp

exp_seq
    : exp
    | exp_seq SEMICOLON exp

exp_list
    : exp
    | exp_list COMMA exp

lvalue
    : ID
    | lvalue DOT ID
    | lvalue LBRACK exp RBRACK
