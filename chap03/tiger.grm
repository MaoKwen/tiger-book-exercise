%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program

%nonassoc DO OF
%nonassoc THEN
%nonassoc ELSE
%left     SEMICOLON
%left     ASSIGN
%left     OR
%left     AND
%nonassoc EQ NEQ GT LT GE LE
%left     PLUS MINUS
%left     TIMES DIVIDE
%left     UMINUS
%%

program: exp

exp
    : var_exp
    | nil_exp
    | int_exp
    | str_exp
    | call_exp
    | op_exp
    | record_exp
    | seq_exp
    | assign_exp
    | if_exp
    | while_exp
    | for_exp
    | break_exp
    | let_exp
    | array_exp

var_exp
    : lvalue

nil_exp
    : NIL

int_exp
    : INT

str_exp
    : STRING

call_exp
    : ID LPAREN arg_list RPAREN

op_exp
    : exp PLUS exp
    | exp MINUS exp
    | exp TIMES exp
    | exp DIVIDE exp
    | exp EQ exp
    | exp NEQ exp
    | exp GT exp
    | exp LT exp
    | exp GE exp
    | exp LE exp
    | MINUS exp       %prec UMINUS

record_exp
    : ID LBRACE efield_list RBRACE

seq_exp
    : LPAREN seq_list RPAREN

assign_exp
    : lvalue ASSIGN exp

if_exp
    : IF exp THEN exp ELSE exp
    | IF exp THEN exp
    | exp AND exp
    | exp OR exp

while_exp
    : WHILE exp DO exp

for_exp
    : FOR ID ASSIGN exp TO exp DO exp

break_exp
    : BREAK

let_exp
    : LET dec_list IN seq_list END

array_exp
    : ID LBRACK exp RBRACK OF exp

dec
    : function_dec
    | var_dec
    | type_dec

function_dec
    : fundec_list

var_dec
    : VAR ID ASSIGN exp
    | VAR ID COLON ID ASSIGN exp

type_dec
    : namety_list

namety
    : TYPE ID EQ ty

namety_list
    : namety
    | namety_list namety

ty
    : ID
    | LBRACE field_list RBRACE
    | ARRAY OF ID

field
    : ID COLON ID

field_list
    : /* empty */
    | field_list_

field_list_
    : field
    | field_list_ COMMA field

seq_list
  : /* empty */
  | seq_list_

seq_list_
  : exp
  | seq_list_ SEMICOLON exp

fundec
    : FUNCTION ID LPAREN field_list RPAREN EQ exp
    | FUNCTION ID LPAREN field_list RPAREN COLON ID EQ exp

fundec_list
    : fundec
    | fundec_list fundec

dec_list
    : /* empty */
    | dec_list dec

arg_list
  : /* empty */
  | arg_list_

arg_list_
  : exp
  | arg_list_ COMMA exp

efield
    : ID EQ exp

efield_list
    : /* empty */
    | efield_list_

efield_list_
    : efield
    | efield_list_ COMMA efield

lvalue
    : ID
    | lvalue DOT ID
    | lvalue LBRACK exp RBRACK
    | ID LBRACK exp RBRACK
